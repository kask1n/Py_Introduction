# Задача 49: Общее обсуждение.
# Создать телефонный справочник с возможностью импорта и экспорта данных в формате .txt.
# Фамилия, имя, отчество, номер телефона - данные, которые должны находиться в файле.
# 1. Программа должна выводить данные;
# 2. Программа должна сохранять данные в текстовом файле;
# 3. Пользователь может ввести одну из характеристик для поиска определенной записи
# (например, имя или фамилию человека);
# 4. Использование функций. Ваша программа не должна быть линейной.
#
# Задача 38: Дополнить телефонный справочник возможностью изменения и удаления данных.
# Пользователь также может ввести имя или фамилию,
# и Вы должны реализовать функционал для изменения и удаления данных.
# ------------------------------------------------------

def show_menu() -> int:  # Отобразить меню с вариантами выбора.
    print("\n1. Отобразить весь справочник\n"
          "2. Найти абонента по фамилии\n"
          "3. Найти абонента по номеру телефона\n"
          "4. Добавить абонента в справочник\n"
          "5. Сохранить справочник в текстовом формате\n"
          "6. Закончить работу\n"
          "-> Выберите необходимое действие: ", end="")
    choice = int(input())
    return choice


def read_csv(filename: str) -> list:  # Пользовательская функция для чтения файла с базой данных.
    data = []
    fields = ["Фамилия", "Имя", "Телефон", "Описание"]
    with open(filename, 'r', encoding='utf-8') as fin:
        for line in fin:
            record = dict(zip(fields, line.strip().split(',')))  # Слияние списков (fields & line) в словарь.
            data.append(record)

    return data


def print_user(line):  # Функция для вывода на экран одного абонента.
    print(f'\n{"Фамилия":8} : {line["Фамилия"]}\n{"Имя":8} : {line["Имя"]}\n'
          f'{"Телефон":8} : {line["Телефон"]}\n{"Описание":8} : {line["Описание"]}')


def display_all():  # Отобразить весь справочник (использует глобальную переменную reader).
    for line in reader:
        print_user(line)


def find_last_name():  # Найти абонентов по фамилии.
    last_name = input('-> Введите фамилию: ')
    # Возвращает даже неполные вхождения (слоги или отдельные буквы):
    for line in filter(lambda x: last_name in x["Фамилия"], reader):
        print_user(line)


def find_phone():  # Найти абонентов по номеру телефона.
    phone = input('-> Введите номер телефона: ')
    # Возвращает даже неполные вхождения (часть строки или отдельные символы):
    for line in filter(lambda x: phone in x["Телефон"], reader):
        print_user(line)


def add_user() -> dict:  # Добавить нового абонента в справочник (БЕЗ СОХРАНЕНИЯ В ФАЙЛ).
    info = {"Фамилия": input('\n-> Введите фамилию абонента: ')}
    info.update({"Имя": input('-> Введите имя абонента: ')})
    info.update({"Телефон": input('-> Введите номер телефона абонента: ')})
    info.update({"Описание": input('-> Введите комментарий для абонента: ')})
    return info


def record_to_file():  # Запись справочника в файл.
    with open(fin, 'w', encoding='utf-8') as file:
        for el in reader:
            file.writelines(f'{el["Фамилия"]},{el["Имя"]},{el["Телефон"]},{el["Описание"]}\n')
            # Построчная запись в файл каждого абонента.


fin = 'phonebook.csv'
reader = read_csv(fin)
for elem in iter(show_menu, 6):  # Основная программа с выходом из цикла через цифру 6.
    if elem == 1:
        display_all()
    if elem == 2:
        find_last_name()
    if elem == 3:
        find_phone()
    if elem == 4:
        # reader.append(add_user())
        reader += [add_user()]  # То же, что и .append()
        print('ДАННЫЕ ПРИНЯТЫ.')
    if elem == 5:
        record_to_file()
        print('ФАЙЛ ОБНОВЛЁН.')

    print('-------------------------------------------')
